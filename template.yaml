AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  helloworld
  
  Sample SAM Template for helloworld

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: provided.al2023
    Architectures:
      - x86_64

  HttpApi:
    CorsConfiguration:
      AllowOrigins:
        - "*"
      MaxAge: 600
    Auth:
      Authorizers:
        HelloWorldAuthorizer:
          FunctionArn: !GetAtt HelloWorldAuthorizerFunction.Arn
          AuthorizerPayloadFormatVersion: "2.0"
          Identity:
            Headers:
              - Authorization
          EnableSimpleResponses: true

        CognitoAuthorizer:
          AuthorizationScopes:
            - helloWorldResourceServer/customer
          IdentitySource: $request.header.Authorization
          JwtConfiguration:
            issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}
            audience:
              - !Ref UserPoolClient

Resources:
  LambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt HelloWorldAuthorizerFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
          - "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiID}/authorizers/*"
          - ApiID: !Ref HelloWorldHttpApi

  HelloWorldSqsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: helloworldqueue

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: prajwalmarch9
      UserPoolId: !Ref UserPool

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Helloworld-Dev
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: HelloworldApplicationClient
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 30
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  HelloWorldHttpApi:
    Type: AWS::Serverless::HttpApi
    # Properties:
    #   StageName: !Ref Env

  HelloWorldAuthorizerFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: backend/cmd/lambdas/hello-world-authorizer/
      Handler: backend/cmd/lambdas/bootstrap

  LoginFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: backend/cmd/lambdas/loginlambda/
      Handler: backend/cmd/lambdas/bootstrap
      Events:
        GreetPublic:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: POST
            ApiId:
              Ref: HelloWorldHttpApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
          HELLO_WORLD_SQS_QUEUE_URL: !Ref AWS::NoValue

  HelloWorldFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: backend/cmd/lambdas/hello-world/
      Handler: backend/cmd/lambdas/bootstrap
      Events:
        GreetPublic:
          Type: HttpApi
          Properties:
            Path: /public/hello
            Method: GET
            ApiId:
              Ref: HelloWorldHttpApi
        Greet:
          Type: HttpApi
          Properties:
            Path: /hello
            Method: GET
            Auth:
              Authorizer: HelloWorldAuthorizer
            ApiId:
              Ref: HelloWorldHttpApi
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
          HELLO_WORLD_SQS_QUEUE_URL: !Ref AWS::NoValue

  # HelloWorldQueueProcessorFunction:
  #   Type: AWS::Serverless::Function 
  #   Metadata:
  #     BuildMethod: go1.x
  #   Properties:
  #     CodeUri: backend/cmd/lambdas/hello-world-queue-processor/
  #     Handler: backend/cmd/lambdas/bootstrap
  #     Events:
  #       # HwSqsEvent:
  #       #   Type: SQS
  #       #   Properties:
  #       #     Queue: !GetAtt HelloWorldSqsQueue.Arn
  #       #     BatchSize: 2
  #       Greet:
  #         Type: HttpApi
  #         Properties:
  #           Path: /queue_processor
  #           Method: GET
  #           Auth:
  #             Authorizer: CognitoAuthorizer
  #           ApiId:
  #             Ref: HelloWorldHttpApi

Outputs:
  CognitoID:
    Description: The Cognito UserPool ID
    Value: !Ref UserPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value: !Ref UserPoolClient
  ListUrl:
    Description: List API URL
    Value: !Sub 'https://${HelloWorldHttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/'
  HelloWorldFunctionArn:
    Description: List Lambda Function ARN
    Value: !GetAtt HelloWorldFunctionRole.Arn

